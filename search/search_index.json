{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DSTA Project Documentation","title":"DSTA Project Documentation"},{"location":"#dsta-project-documentation","text":"","title":"DSTA Project Documentation"},{"location":"crazyswarm/","text":"Crazyswarm2 Setup in Highbay High-Level Steps Turn on the VICON Connect to VICON on the machine Position and turn on drones Run program (a few times if needed) Retrieve drones and charge (if needed) (1) Turn on VICON The best guide on how to turn on the VICON is here (https://gitlab.com/mit-acl/fsw/mocap/-/wikis/VICON:-Creating-Rigid-Bodies). JUST FOLLOW STEPS 1-4 since we will be using the single-marker method. Make sure that the setup is live and looks a little like below: (2) Connect to VICON on the machine To allow Crazyswarm2 to access the information from VICON, run this in a terminal on the highbay machine: ros2 launch mocap vicon.launch.xml It should successfully connect to the highbay machine and you should get latency readings. Make sure to keep this running in the background when running programs! (3) Position and turn on drones Check out crazyswarm2/crazyflie/config/crazyflies.yaml . The top of the file should look something like this: robots: cf1: enabled: true uri: radio://0/80/2M/E7E7E7E701 initial_position: [0.0, 0.0, 0.0] type: cf21 cf2: enabled: true uri: radio://0/80/2M/E7E7E7E702 initial_position: [0.0, -1.0, 0.0] type: cf21 The axes of the highbay are like so: -x | | | -y ------------ +y | | | +x ---------------- | Control Room | ---------------- The control room box is where the computers are located (in the far +x, +y side). The below assumes you're at the control room box facing the -x direction. With the config file above, that means the crazyflies must be oriented like so: ------- ------- | cf2 | |-- 1.0 units --| | cf1 | ------- ------- You can tell which crazyflie is which based on the number written on tape on the bottom of it. For example, under cf1, there is a tape with the number 1 and it corresponds to URI radio://0/80/2M/E7E7E7E701 . The ends of the table is about 1.0 units (technically a little more but that's okay). Place the crazyflies on opposite ends of the table and make sure it is flat. Orient the crazyflies with the red and black battery wire facing the -x direction (away from the control room). Alternatively, you can think that you should align the front of the drone with the +x axis (facing towards the control room). Finally, turn on the drones. Firstly, make sure NO CRAZYFLIE PROGRAM IS CURRENTLY RUNNING. Then press the button power button for both drones (order and timing doesn't really matter). The power button is what's labelled the \"reset button\" below. The crazyflie will automatically test all its motors by gently spinning them. If this does not happen within a minute of turning on, try again (and make sure no program is currently sending it signals)! Finally, close the velcro around the net so the crazyflies don't crash without the net! (4) Run program (a few times if needed) Execute the program. You may need to execute it a few times before it successfully connects (if it doesn't do another after 1.5 minutes, then it's almost certainly not connected so just rerun it!). If it fails a ton of times or keeps on getting stuck at some part, restart the crazyflie. Here's a small compilation of errors I've run into and actions: Error Action Stuck on Requesting memories... Restart the Crazyflie (5) Retrieve drones and charge (if needed) After the crazyflies do its thing, you'll need to retrieve them! I go under the net and try to grab the crazyflies out of one of the many holes in it. To charge the crazyflie, connect it to a laptop using the USB-A to micro-USB cable. Make sure the battery is still plugged in. Turn on the crazyflie. It should have two blue lights with one of them flashing. While the light is flashing, it's being charged. If it's solid, it's done charging. REMEMBER: turn off the crazyflie before running code since it can still recieve signals while charging!! Debugging My crazyflie automatically crashed out when trying to do anything (hello_world, etc.) The axes are probably incorrect. Recall: -x | | | -y ------------ +y | | | +x ---------------- | Control Room | ----------------","title":"Crazyswarm2 Setup in Highbay"},{"location":"crazyswarm/#crazyswarm2-setup-in-highbay","text":"","title":"Crazyswarm2 Setup in Highbay"},{"location":"crazyswarm/#high-level-steps","text":"Turn on the VICON Connect to VICON on the machine Position and turn on drones Run program (a few times if needed) Retrieve drones and charge (if needed)","title":"High-Level Steps"},{"location":"crazyswarm/#1-turn-on-vicon","text":"The best guide on how to turn on the VICON is here (https://gitlab.com/mit-acl/fsw/mocap/-/wikis/VICON:-Creating-Rigid-Bodies). JUST FOLLOW STEPS 1-4 since we will be using the single-marker method. Make sure that the setup is live and looks a little like below:","title":"(1) Turn on VICON"},{"location":"crazyswarm/#2-connect-to-vicon-on-the-machine","text":"To allow Crazyswarm2 to access the information from VICON, run this in a terminal on the highbay machine: ros2 launch mocap vicon.launch.xml It should successfully connect to the highbay machine and you should get latency readings. Make sure to keep this running in the background when running programs!","title":"(2) Connect to VICON on the machine"},{"location":"crazyswarm/#3-position-and-turn-on-drones","text":"Check out crazyswarm2/crazyflie/config/crazyflies.yaml . The top of the file should look something like this: robots: cf1: enabled: true uri: radio://0/80/2M/E7E7E7E701 initial_position: [0.0, 0.0, 0.0] type: cf21 cf2: enabled: true uri: radio://0/80/2M/E7E7E7E702 initial_position: [0.0, -1.0, 0.0] type: cf21 The axes of the highbay are like so: -x | | | -y ------------ +y | | | +x ---------------- | Control Room | ---------------- The control room box is where the computers are located (in the far +x, +y side). The below assumes you're at the control room box facing the -x direction. With the config file above, that means the crazyflies must be oriented like so: ------- ------- | cf2 | |-- 1.0 units --| | cf1 | ------- ------- You can tell which crazyflie is which based on the number written on tape on the bottom of it. For example, under cf1, there is a tape with the number 1 and it corresponds to URI radio://0/80/2M/E7E7E7E701 . The ends of the table is about 1.0 units (technically a little more but that's okay). Place the crazyflies on opposite ends of the table and make sure it is flat. Orient the crazyflies with the red and black battery wire facing the -x direction (away from the control room). Alternatively, you can think that you should align the front of the drone with the +x axis (facing towards the control room). Finally, turn on the drones. Firstly, make sure NO CRAZYFLIE PROGRAM IS CURRENTLY RUNNING. Then press the button power button for both drones (order and timing doesn't really matter). The power button is what's labelled the \"reset button\" below. The crazyflie will automatically test all its motors by gently spinning them. If this does not happen within a minute of turning on, try again (and make sure no program is currently sending it signals)! Finally, close the velcro around the net so the crazyflies don't crash without the net!","title":"(3) Position and turn on drones"},{"location":"crazyswarm/#4-run-program-a-few-times-if-needed","text":"Execute the program. You may need to execute it a few times before it successfully connects (if it doesn't do another after 1.5 minutes, then it's almost certainly not connected so just rerun it!). If it fails a ton of times or keeps on getting stuck at some part, restart the crazyflie. Here's a small compilation of errors I've run into and actions: Error Action Stuck on Requesting memories... Restart the Crazyflie","title":"(4) Run program (a few times if needed)"},{"location":"crazyswarm/#5-retrieve-drones-and-charge-if-needed","text":"After the crazyflies do its thing, you'll need to retrieve them! I go under the net and try to grab the crazyflies out of one of the many holes in it. To charge the crazyflie, connect it to a laptop using the USB-A to micro-USB cable. Make sure the battery is still plugged in. Turn on the crazyflie. It should have two blue lights with one of them flashing. While the light is flashing, it's being charged. If it's solid, it's done charging. REMEMBER: turn off the crazyflie before running code since it can still recieve signals while charging!!","title":"(5) Retrieve drones and charge (if needed)"},{"location":"crazyswarm/#debugging","text":"My crazyflie automatically crashed out when trying to do anything (hello_world, etc.) The axes are probably incorrect. Recall: -x | | | -y ------------ +y | | | +x ---------------- | Control Room | ----------------","title":"Debugging"},{"location":"execute/","text":"Execute Code on Highbay This is a series of commands used on the highbay machines. Multi-drone, multi-mission distributed Kirk Launch the main crazyswarm launch.py with cflib ros2 launch crazyflie launch.py backend:=cflib Start the middleware server cd /home/mers/Developer/kirk_setup source venv/bin/activate python3 distr.py Run the crazyflies, wait till they're hovering bash execute.sh Run Kirk podman start 3d2642905d0e podman exec -it 3d2642905d0e /bin/bash bash execute_kirk.sh Archive Run the Multi-Drone Planner podman start 3d2642905d0e podman exec -it 3d2642905d0e /bin/bash kirk run kirk-v2/examples/drone-case/easy.lisp -P scenario1 --driver-command 'curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"data1\\\":\\\"~A\\\", \\\"data2\\\":\\\"~A\\\"}\" http://localhost:5000/submit' --tolerance 0.5 -p 8000 --verbose & cd /home/mers/Developer/kirk_setup source venv/bin/activate python3 main.py ros2 launch crazyflie_examples launch.py script:=hello_world backend:=cflib","title":"Execute Code on Highbay"},{"location":"execute/#execute-code-on-highbay","text":"This is a series of commands used on the highbay machines.","title":"Execute Code on Highbay"},{"location":"execute/#multi-drone-multi-mission-distributed-kirk","text":"Launch the main crazyswarm launch.py with cflib ros2 launch crazyflie launch.py backend:=cflib Start the middleware server cd /home/mers/Developer/kirk_setup source venv/bin/activate python3 distr.py Run the crazyflies, wait till they're hovering bash execute.sh Run Kirk podman start 3d2642905d0e podman exec -it 3d2642905d0e /bin/bash bash execute_kirk.sh","title":"Multi-drone, multi-mission distributed Kirk"},{"location":"execute/#archive","text":"Run the Multi-Drone Planner podman start 3d2642905d0e podman exec -it 3d2642905d0e /bin/bash kirk run kirk-v2/examples/drone-case/easy.lisp -P scenario1 --driver-command 'curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"data1\\\":\\\"~A\\\", \\\"data2\\\":\\\"~A\\\"}\" http://localhost:5000/submit' --tolerance 0.5 -p 8000 --verbose & cd /home/mers/Developer/kirk_setup source venv/bin/activate python3 main.py ros2 launch crazyflie_examples launch.py script:=hello_world backend:=cflib","title":"Archive"}]}